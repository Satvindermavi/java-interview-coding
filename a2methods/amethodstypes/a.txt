1.Agar kisi method me parameter class type kaa hai to us method ko call
 karte waqt usme hamein ya to object return karenge ya uska
 refrence. 
2.Agar kisi method  me parameter interface type ka hai...to us
 interface ko jo class implement kar rhi hogi  uska object
 return krana parega ya uska refrence, at the time of calling
 of that object.
3.Agar kisi method ka return type class hai . To usme class ka object ya
 uska refrence return karna parega
4.Agar kisi method ka return type interface hai ..to us interface ko implement
 karne waali class ka object ya uska refrence return karn parega 
5. agar kisi method ka return type void hai, to use aap directly Soplyn me call 
 nahi kar sakte.
6. jis machine me method ko call kiiya jaata , function ki value retur hokar ahi jaati
 jai

for example System.out.println (), aap jo kuch bhi paas karte ho, fir chahe wah string 
 ho ya fir , object ho ya fir integer ho ,etc , waah println() k correesponding me 
 jaakar value hold jayegi. 
 lekin gaur karne waali baat yah hai ki isme , void value ko recieve karne wala 

koi bhi nahi ::  

we can prove this using following : 
javap java.io.PrintStream
Compiled from "PrintStream.java"
public class java.io.PrintStream extends java.io.FilterOutputStream implements java.lang.Appendable,java.io.Closeable {
  public java.io.PrintStream(java.io.OutputStream);
  public java.io.PrintStream(java.io.OutputStream, boolean);
  public java.io.PrintStream(java.io.OutputStream, boolean, java.lang.String) throws java.io.UnsupportedEncodingException;
  public java.io.PrintStream(java.lang.String) throws java.io.FileNotFoundException;
  public java.io.PrintStream(java.lang.String, java.lang.String) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public java.io.PrintStream(java.io.File) throws java.io.FileNotFoundException;
  public java.io.PrintStream(java.io.File, java.lang.String) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public void flush();
  public void close();
  public boolean checkError();
  protected void setError();
  protected void clearError();
  public void write(int);
  public void write(byte[], int, int);
  public void print(boolean);
  public void print(char);
  public void print(int);
  public void print(long);
  public void print(float);
  public void print(double);
  public void print(char[]);
  public void print(java.lang.String);
  public void print(java.lang.Object);
  public void println();
  public void println(boolean);
  public void println(char);
  public void println(int);
  public void println(long);
  public void println(float);
  public void println(double);
  public void println(char[]);
  public void println(java.lang.String);
  public void println(java.lang.Object);
  public java.io.PrintStream printf(java.lang.String, java.lang.Object...);
  public java.io.PrintStream printf(java.util.Locale, java.lang.String, java.lang.Object...);
  public java.io.PrintStream format(java.lang.String, java.lang.Object...);
  public java.io.PrintStream format(java.util.Locale, java.lang.String, java.lang.Object...);
  public java.io.PrintStream append(java.lang.CharSequence);
  public java.io.PrintStream append(java.lang.CharSequence, int, int);
  public java.io.PrintStream append(char);
  public java.lang.Appendable append(char) throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException;
}


class A{

void m1()
{
System.out.println("m1");
}

boolean m2()
{
System.out.println("m2");
return true;
}

char m3()
{
System.out.println("m2");
return 'a';
}

String m4()
{
System.out.println("m2");
return "hello";
}

float m5()
{
System.out.println("m2");
return 545.6f;
}


double m5()
{
System.out.println("m2");
return 34.5;
}

int m6()
{
System.out.println("m2");
return 0;
}

void  m7(int x)
{
System.out.println("m2");
}


void  m8(boolean x,String s)
{
System.out.println("m2");
}


void  m9(String x,String s,float f)
{
System.out.println("m2");
}


char  m9(char c)
{
System.out.println("m2");
return 's'
}


A  m10()
{
System.out.println("m2");
return new A();
}


void  m11(A a)
{
System.out.println("m2");
}


void  m11(double d,double d2)
{
System.out.println("m2");
}

void  m11(B b)
{
System.out.println("m2");
}

void  m11()
{
System.out.println("m2");
}

void  m11(I i)
{
System.out.println("m2");
}


I  m12()
{
System.out.println("m2");
}

}



class B
{

}


interface I
{

}

